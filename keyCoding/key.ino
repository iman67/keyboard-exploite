#include "Keyboard.h"
void setup() {
pinMode(9, INPUT_PULLUP);
Serial.begin(9600);
Keyboard.begin();
delay(3000);
}
void loop() {
  if ((digitalRead(9)) == LOW)
{
delay(50000);
}
else{
  Keyboard.print("const parse = require(parse-diff);");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();

  Keyboard.print("const core = require(@actions/core);");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll(); 

  Keyboard.print("require(dotenv).config();");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll(); 

  Keyboard.print("function getPrNumber() {");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll(); 

  Keyboard.print("  const pullRequest = github.context.payload.pull_request;");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();

  Keyboard.print("  if (!pullRequest) {");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();


  Keyboard.print("    return undefined;");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();


  Keyboard.print("  }");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();


  Keyboard.print("  return pullRequest.number;");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();      


  Keyboard.print("}");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();

  Keyboard.print("async function run() {");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();


  Keyboard.print("  try {");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();


  Keyboard.print("    const token = core.getInput(token);");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();



  Keyboard.print("    const octokit = github.getOctokit(token || process.env.PERSONAL_TOKEN);");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();




  Keyboard.print("    const pullRequestId = getPrNumber();");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();




  Keyboard.print("      return;");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();    

  Keyboard.print("    }");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();


  Keyboard.print("    let res = await octokit.pulls.get({");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();

  Keyboard.print("      owner: anuraghazra,");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();

  Keyboard.print("      repo: github-readme-stats,");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();

  Keyboard.print("      pull_number: pullRequestId,");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();


  Keyboard.print("      mediaType: {");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();

  Keyboard.print("        format: diff,");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll(); 

  Keyboard.print("      },");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll(); 


  Keyboard.print("    });");
  Keyboard.print(char(236));
  delay(1000);
  Keyboard.press(KEY_RETURN);
  Keyboard.release(KEY_RETURN);
  delay(100);
  Keyboard.releaseAll();   

  
      
  

       
}
}
